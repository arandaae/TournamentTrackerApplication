D.R.Y.
Dont repeat yourself

Take the issue and start writing down ideas and mapping out what you want to accomplish
-Some type of data that is accessible everywhere in the application
- Global variable
- Static Class (normaly you wouldn't store data in a static class
How do we connect to two different data sources to do the same task?

What was used to create this project

-	IDE- Microsoft Visual Studios 2022

- 	Microsoft SQL Server Managment Studio

-	Metro Studio (icons for Winforms)

-	Nuget packages used 
	
	-
	-


Static class for data source info 

Interface for data sources




Cleaned up files
Created seperate folders in TrackerLibrary for DataAccess and Models

-DataAccess conatains
	-IDataConnection
	-SqlConnector
	-TextConnector

-Models contains
	-MatchupEntryModel
	-MatchupModel
	-PersonModel
	-PrizeModel
	-TeamModel
	-TournamentModel

Removed IDataConnection List in GlobalConfig.cs
-	This will allow the option to use SQL database or create a text file
-

Created a new class Enums
-	This will store the Database type options that can be called in GlobalConfig.cs
- 	This will also decrease the chance of selecting the incorrect Database Type when chosing an option



Text Connection lesson
-	Wire-up TextConnector.cs
-	Each Model will be in its own text file
-	Create TextConnectorProcessor.cs this will store a method for storing to the file path
-	Change namespace to TrackerLibrary.DataAccess.TextConnector
-	Installing the path to where all of the files go will be stored in one folder path	
-	Created new file path for Data
- 	Create new app setting in App.config (add key and value for filepath) <add key="filePath" value="F:\Data\TournamentTracker"/>
-	The method FullFilePath(this string fileName) is an extension method that will store the fileName and return the entire path
-	The extension method will only be stored here to not create issues between classes
-	Create new method, ConvertToPrizeModel, that will create a new list of PrizeModel if there is no record

-	Find the max ID
	-	This is something that the method in the TextConnector could do since we are doing an insert it needs to have the ID
		
	-	Add the namespace TrackerLibrary.DataAccess.TextConnector to TextConnector.cs

	-	Rename namespace TrackerLibrary.DataAccess.TextConnector to TrackerLibrary.DataAccess.TextHelpers to avoid conflicting with the class name TextConnector

	-	Add private const string PrizesFile = "PrizesModels.csv to TextConnector.cs

	-	Add new list of PrizeModel that will load the text file and convert the text to List<PrizeModel> to TextConnector.cs

	-	(Find the Max Id) Add variable to order list by descending Id order that gives the first record that has the highest Id, then adds 1

	- 	Add the new record with the new ID

-	Add method to TextConnectorProcessor.cs that will Convert the prizes to list <string> and Save the list<string> to the text file

-	Ran into a bug that would not accept the file path of F:\TournamentTrackerApplication\Data (file path needed to be first child of configuration
	-	Created a new file Data > TournamentTracker (F:\Data\TournamentTracker)


Creating Team Form

-	Creating event for Create Member button

	-Add in variable for each item in Person Model
	-Add Connection string to CreatePerson Model

-	Create method to validate form, using if statement

-	Add PersonModel to IDataConnection interface

-	Implement (create an instance of IDataConnection) in the following
	-SqlConnector
	-TextConnector

-	In SqlConnector.cs Add using statement with SQL conneciton string to the PersonModel method
	-Add in parameters for CreatePerson (this will be identical to the format of the CreatePrize model)

-	Add Id property to PersonModel

-	Add stored procedure for People in SQL Server
	-	 This will work with the CreatePerson Model
	- 	This will implement a SQL Database save for our person

-	In CreateTeamForm.cs Add empty string values for each variable in the createMemberButton_Click method (this will clear out the form)

-	Test if implementation of Create Member button is working

-	Found bug when connecting to dbo.People in SQL server
	-	Exception was thrown in Visual Studio for null in id column of dbo.People table
	-	Found that Identity Specification was set to No as well as (Is Identity) set to No
	-	Change Identity Increment to 1 and changed Identity Seed to 1
	-	Issues was resolved after this fix

-	Implementing the TextConnector.cs for PersonModel

	- 	Add Field for PeopleFile = "PersonModel.csv";
	-	Add List<PersonModel> people in CreatePerson Method
	-	Create ConvertToPersonModels(); in TextConnectorProcessor.cs
		-	This will be a new List<PersonModel>()
		- 	Add a foreach loop to loop through each variable to add to the text file
		-	Add string[] cols to foreach loop
		-	Create a new object of PersonModel in foreach loop
		-	Add in each variable of the table People in SQL server

-	Add SaveToPeopleFile method to TextConnectorProcessor.cs


Creat Team Form

-	Wire-up drop, listbox, taking the person from add member button to listbox 

-	Select Team Member drop down

	-	In CreateTeamForm.cs Add private field for List<PersonModel> availableTeamMembers and selectedTeamMembers

	-	The availableTeamMembers will be in the Select Team Member drop down, the selectedTeamMember will be in the list box

	-	Add method WireUpLists to CreatTeamForm.cs

	-	Create new  read only property in PersonModel.cs that allows us to get a specific person (public string FullName)

-	Team Member List Box

	-	In CreateTeamForm add teamMembersListBox.DataSource = selectedTeamMember; teamMembersListBox.DisplayMember = "FullName";

	- 	Add method WireUpLists() to CreatTeamForm() constructor

	-	Create new method CreateSampleData() in CreateTeamForm.cs

	- 	Add CreateSampleData() to CreateTeamForm constructor before WireUpLists()

	-	The Sample Data is functional so the CreateSampleData() will be commmented out for now.

	- 	Wire up data  (collection) display to our text file
	
		- In IDataConnection.cs create new item List<PersonModel> GetPerson_All()
		- Create new instance in SqlConnector.cs
		- Add using statement for connection to SQL database
		- Call ,in using statement, stored procedure People from SQL database
		- Create new stored procedure dbo.spPeople_GetAll in SQL Server
		- Create a new instance in TextConnector.cs of GetPerson_All method
		- Create new private const string db to replace the repeating connection string 

	-	Ran into bug 
		-	System.Data.SqlClient.SqlException: 
		-Fixed bug see notes in Word document

-	Wire up Add member button in CreateTeamForm.cs

	- Create event for when Add Member button is clicked

	- Add a new instance of PersonModel to the Add member button event

	- Add field to remove person from drop down

	- Add field to Add person to selected Team Members list

	- Call WireUpLists() method in the Add Member button event

	- Add null setting in WireUpLists() method

-	Delete Selected button wire up in CreateTeamForm.cs

	- Change button text  and name from delete selected to remove selected
	- Add event for removeSelectedMemberButton_Click in CreateTeamForm.cs
	- Add if statement to add member button and remove member button that fixes bug that would break the program if nothing was selected

-	Implement text file in TextConnector.cs by adding return value to GetPerson_All method

-	Add event to Create Team button in CreateTeamForm.cs

	- 


-	Couple (loose coupling, they don't really know about each other but they can work with each other)Create Tournament Form and Create Prize Form to work together when clicking Create Prize in Create Tournament Form

	- Create new interface in TrackerUI to perform this


-	In SqlConnector.cs, the CreateTournament method is a method that does one thing broken up into multiple subtasks

	- This will be refactored into 3 private methods then called in the CreateTournament Method

-	Finish Create Tournament Form

	- Add the last parts of logic